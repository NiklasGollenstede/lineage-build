diff --git a/apks/auditor/gradle-env.nix b/apks/auditor/gradle-env.nix
index 3469da2..eb4c9fe 100644
--- a/apks/auditor/gradle-env.nix
+++ b/apks/auditor/gradle-env.nix
@@ -27,8 +27,9 @@
 , gradleGen
 , writeText
 , writeTextDir
+, makeWrapper, unzip, ncurses5, ncurses6
 }:
-
+let gradleArgs = { inherit lib stdenv fetchurl makeWrapper unzip ncurses5 ncurses6; }; in
 {
 # Path to the environment spec generated by gradle2nix (e.g. gradle-env.json).
   envSpec
@@ -233,7 +234,7 @@ let
     paths = map mkDep deps ++ mkModuleMetadata deps ++ mkSnapshotMetadata deps;
   };
 
-  mkInitScript = projectSpec: gradle:
+  mkInitScript = projectSpec: gradle': let gradle = gradle' gradleArgs; in
     let
       repos = mapAttrs (mkRepo projectSpec.name) projectSpec.dependencies;
       hasDependencies = mapAttrs (type: deps: deps != []) projectSpec.dependencies;
@@ -325,7 +326,7 @@ let
       '';
 
   mkGradle = gradleSpec:
-    gradleGen.gradleGen {
+    gradleGen {
       inherit (gradleSpec) nativeVersion version sha256;
     };
 
@@ -367,7 +368,7 @@ in stdenv.mkDerivation ((builtins.removeAttrs args [ "fetchers" ]) // {
 
   inherit pname version;
 
-  nativeBuildInputs = (args.nativeBuildInputs or []) ++ [ projectEnv.gradle ];
+  nativeBuildInputs = (args.nativeBuildInputs or []) ++ [ (projectEnv.gradle gradleArgs) ];
 
   buildPhase = args.buildPhase or ''
     runHook preBuild
diff --git a/apks/chromium/bromite.nix b/apks/chromium/bromite.nix
index 60ebff1..94f58cd 100644
--- a/apks/chromium/bromite.nix
+++ b/apks/chromium/bromite.nix
@@ -69,17 +69,18 @@ in (chromium.override {
     rtc_use_x11_extensions=false;
     rtc_use_pipewire=false;
   };
-}).overrideAttrs (attrs: {
+}).overrideAttrs (final: prev: { # "final" parameter is available in 22.05+
+  inherit bromite_src;
   postPatch = ''
     ( cd src
-      cat ${bromite_src}/build/bromite_patches_list.txt | while read patchfile; do
+      cat ${final.bromite_src}/build/bromite_patches_list.txt | while read patchfile; do
         echo Applying $patchfile
-        ${git}/bin/git apply --unsafe-paths "${bromite_src}/build/patches/$patchfile"
+        ${git}/bin/git apply --unsafe-paths "${final.bromite_src}/build/patches/$patchfile"
       done
 
       # Disable Auto updater by default. It's only set up to work with official builds.
       substituteInPlace chrome/android/java/src/org/chromium/chrome/browser/omaha/inline/BromiteInlineUpdateController.java \
         --replace "private boolean mEnabled = true" "private boolean mEnabled = false"
     )
-  '' + attrs.postPatch;
+  '' + prev.postPatch;
 })
diff --git a/apks/chromium/default.nix b/apks/chromium/default.nix
index f1f78b2..0c79ef2 100644
--- a/apks/chromium/default.nix
+++ b/apks/chromium/default.nix
@@ -20,6 +20,7 @@
 , trichromeLibraryPackageName ? "org.chromium.trichromelibrary"
 , version ? "100.0.4896.127"
 , versionCode ? null
+, depsPath ? null
 # Potential buildTargets:
 # chrome_modern_public_bundle + system_webview_apk
 # trichrome_webview_apk + trichrome_chrome_bundle + trichome_library_apk
@@ -92,11 +93,13 @@ let
     # there is no problem with nix-build, but platform detection in nix-shell is not correct
     host_cpu   = { i686-linux = "x86"; x86_64-linux = "x64"; armv7l-linux = "arm"; aarch64-linux = "arm64"; }.${stdenv.buildPlatform.system};
     #target_cpu = { i686-linux = "x86"; x86_64-linux = "x64"; armv7l-linux = "arm"; aarch64-linux = "arm64"; }.${stdenv.hostPlatform.system};
+  } // lib.optionalAttrs (lib.versionAtLeast version "107") {
+    clang_base_path = "/build/chromium-${version}-src/src/third_party/llvm-build/Release+Asserts"; # (avoid a failing configure check)
   } // customGnFlags;
 
-  deps = import (./vendor- + version + ".nix") {
+  deps = import (if depsPath != null then depsPath else ./vendor- + version + ".nix") {
     inherit fetchgit fetchcipd fetchurl runCommand symlinkJoin;
-    platform = "linux-amd64"; # TODO: Figure out mapping for cipd platform
+    platform = "linux-amd64"; arch = "amd64"; # TODO: Figure out mapping for cipd platform
   } // depsOverrides;
 
   src = runCommand "chromium-${version}-src" {} # TODO: changed from mkDerivation since it needs passAsFile or else this can get too big for the derivation: nixos "while setting up the build environment" "argument list too long"
@@ -183,8 +186,10 @@ in stdenvNoCC.mkDerivation rec {
   # TODO: Much of the nixos-specific stuff could probably be made conditional
   postPatch = lib.optionalString (lib.versionAtLeast version "91") ''
     ( cd src
-      # Required for patchShebangs (unsupported)
-      chmod -x third_party/webgpu-cts/src/tools/${lib.optionalString (lib.versionAtLeast version "96") "run_"}deno
+      # patchShebangs does not support "env -S", but we don't need these anyway:
+      for path in third_party/webgpu-cts/{,src/}tools/{,run_}deno third_party/dawn/third_party/webgpu-cts/tools/run_deno ; do
+        [[ ! -e $path ]] || chmod -x $path
+      done
     )
   ''
   # Work around missing library when building md5sum_bin and monochrome. TODO: Hack
diff --git a/apks/chromium/mk-vendor-file.py b/apks/chromium/mk-vendor-file.py
index c448b9f..837555b 100755
--- a/apks/chromium/mk-vendor-file.py
+++ b/apks/chromium/mk-vendor-file.py
@@ -13,7 +13,7 @@ import string
 import subprocess
 import sys
 
-BASEDIR = "/mnt/cache/chromium"
+CACHE_DIR = os.environ.get('CACHE_DIR', "/mnt/cache/chromium")
 
 SKIP_DEPS = [
     "src/tools/luci-go",
@@ -71,7 +71,7 @@ def nix_str_cipd(path, dep):
     return "  %-90s = %s;\n" %  ('"' + path + '"', src_str)
 
 def make_vendor_file(chromium_version, target_os):
-    topdir = os.path.join(BASEDIR, chromium_version)
+    topdir = os.path.join(CACHE_DIR, chromium_version)
     if not os.path.isdir(topdir):
         os.makedirs(topdir)
 
@@ -159,7 +159,7 @@ def make_vendor_file(chromium_version, target_os):
                 if fields['dep_type'] == "git":
                     url, rev = fields['url'].split('@')
                     wholepath = os.path.join(topdir, path)
-                    memoized_path = os.path.join(BASEDIR, rev)
+                    memoized_path = os.path.join(CACHE_DIR, rev)
 
                     if os.path.exists(memoized_path + ".sha256"): # memoize hash
                         sha256 = open(memoized_path + ".sha256").read()
@@ -191,7 +191,7 @@ def make_vendor_file(chromium_version, target_os):
                     for p in fields['packages']:
                         package, version = p['package'], p['version']
                         dirname = (package + '_' + version).replace('/', '_').replace(':', '') # TODO: Better path normalization
-                        memoized_path = os.path.join(BASEDIR, dirname)
+                        memoized_path = os.path.join(CACHE_DIR, dirname)
 
                         if os.path.exists(memoized_path + ".sha256"): # memoize hash
                             sha256 = open(memoized_path + ".sha256").read()
@@ -216,7 +216,7 @@ def make_vendor_file(chromium_version, target_os):
 
     with open('vendor-%s.nix' % chromium_version, 'w') as vendor_nix:
         vendor_nix.write("# GENERATED BY 'mk-vendor-file.py %s' for %s\n" % (chromium_version, ", ".join(target_os)))
-        vendor_nix.write("{fetchgit, fetchcipd, fetchurl, runCommand, symlinkJoin, platform}:\n");
+        vendor_nix.write("{fetchgit, fetchcipd, fetchurl, runCommand, symlinkJoin, platform, arch}:\n");
         vendor_nix.write("{\n");
 
         for path, dep in sorted(deps.items()):
diff --git a/apks/fdroid/gradle-env.nix b/apks/fdroid/gradle-env.nix
index 3469da2..eb4c9fe 100644
--- a/apks/fdroid/gradle-env.nix
+++ b/apks/fdroid/gradle-env.nix
@@ -27,8 +27,9 @@
 , gradleGen
 , writeText
 , writeTextDir
+, makeWrapper, unzip, ncurses5, ncurses6
 }:
-
+let gradleArgs = { inherit lib stdenv fetchurl makeWrapper unzip ncurses5 ncurses6; }; in
 {
 # Path to the environment spec generated by gradle2nix (e.g. gradle-env.json).
   envSpec
@@ -233,7 +234,7 @@ let
     paths = map mkDep deps ++ mkModuleMetadata deps ++ mkSnapshotMetadata deps;
   };
 
-  mkInitScript = projectSpec: gradle:
+  mkInitScript = projectSpec: gradle': let gradle = gradle' gradleArgs; in
     let
       repos = mapAttrs (mkRepo projectSpec.name) projectSpec.dependencies;
       hasDependencies = mapAttrs (type: deps: deps != []) projectSpec.dependencies;
@@ -325,7 +326,7 @@ let
       '';
 
   mkGradle = gradleSpec:
-    gradleGen.gradleGen {
+    gradleGen {
       inherit (gradleSpec) nativeVersion version sha256;
     };
 
@@ -367,7 +368,7 @@ in stdenv.mkDerivation ((builtins.removeAttrs args [ "fetchers" ]) // {
 
   inherit pname version;
 
-  nativeBuildInputs = (args.nativeBuildInputs or []) ++ [ projectEnv.gradle ];
+  nativeBuildInputs = (args.nativeBuildInputs or []) ++ [ (projectEnv.gradle gradleArgs) ];
 
   buildPhase = args.buildPhase or ''
     runHook preBuild
diff --git a/apks/seedvault_10/gradle-env.nix b/apks/seedvault_10/gradle-env.nix
index 8c07a55..27ecca8 100644
--- a/apks/seedvault_10/gradle-env.nix
+++ b/apks/seedvault_10/gradle-env.nix
@@ -19,7 +19,8 @@
 #         '';
 #       }
 
-{ stdenv, lib, buildEnv, fetchurl, gradleGen, writeText, writeTextDir, runCommandCC, unzip, zip, autoPatchelfHook }:
+{ stdenv, lib, buildEnv, fetchurl, gradleGen, writeText, writeTextDir, runCommandCC, unzip, zip, autoPatchelfHook, makeWrapper, ncurses5, ncurses6 }:
+let gradleArgs = { inherit lib stdenv fetchurl makeWrapper unzip ncurses5 ncurses6; }; in
 
 { envSpec
 , pname ? null
@@ -235,7 +236,7 @@ let
       '';
 
   mkGradle = gradleSpec:
-    gradleGen.gradleGen {
+    gradleGen {
       inherit (gradleSpec) nativeVersion version sha256;
     };
 
@@ -257,7 +258,7 @@ in stdenv.mkDerivation (args // {
 
   inherit pname version;
 
-  nativeBuildInputs = (args.nativeBuildInputs or []) ++ [ projectEnv.gradle ];
+  nativeBuildInputs = (args.nativeBuildInputs or []) ++ [ (projectEnv.gradle gradleArgs) ];
 
   buildPhase = args.buildPhase or ''
     runHook preBuild
diff --git a/flake.lock b/flake.lock
index 95c14a1..f0640eb 100644
--- a/flake.lock
+++ b/flake.lock
@@ -4,14 +4,16 @@
       "inputs": {
         "devshell": "devshell",
         "flake-utils": "flake-utils",
-        "nixpkgs": "nixpkgs"
+        "nixpkgs": [
+          "nixpkgs"
+        ]
       },
       "locked": {
-        "lastModified": 1638562808,
-        "narHash": "sha256-nnGyBugMQo9WweTgpfPbJu0fHnRtxvsPQ9el2D3wPrY=",
+        "lastModified": 1674678085,
+        "narHash": "sha256-WllE/pQ5n9xLVHdSftXJHPktStgaSBRNwCN/xCqUV9w=",
         "owner": "tadfisher",
         "repo": "android-nixpkgs",
-        "rev": "a191ab6adb019b09d3bb919bb98dca31d83519d5",
+        "rev": "50b4cd4ed14fc5518913a774b8a861fa86803fa1",
         "type": "github"
       },
       "original": {
@@ -22,12 +24,22 @@
       }
     },
     "devshell": {
+      "inputs": {
+        "flake-utils": [
+          "androidPkgs",
+          "nixpkgs"
+        ],
+        "nixpkgs": [
+          "androidPkgs",
+          "nixpkgs"
+        ]
+      },
       "locked": {
-        "lastModified": 1637575296,
-        "narHash": "sha256-ZY8YR5u8aglZPe27+AJMnPTG6645WuavB+w0xmhTarw=",
+        "lastModified": 1671489820,
+        "narHash": "sha256-qoei5HDJ8psd1YUPD7DhbHdhLIT9L2nadscp4Qk37uk=",
         "owner": "numtide",
         "repo": "devshell",
-        "rev": "0e56ef21ba1a717169953122c7415fa6a8cd2618",
+        "rev": "5aa3a8039c68b4bf869327446590f4cdf90bb634",
         "type": "github"
       },
       "original": {
@@ -38,11 +50,11 @@
     },
     "flake-utils": {
       "locked": {
-        "lastModified": 1638122382,
-        "narHash": "sha256-sQzZzAbvKEqN9s0bzWuYmRaA03v40gaJ4+iL1LXjaeI=",
+        "lastModified": 1667395993,
+        "narHash": "sha256-nuEHfE/LcWyuSWnS8t12N1wc105Qtau+/OdUAjtQ0rA=",
         "owner": "numtide",
         "repo": "flake-utils",
-        "rev": "74f7e4319258e287b0f9cb95426c9853b282730b",
+        "rev": "5aed5285a952e0b949eb3ba02c12fa4fcfef535f",
         "type": "github"
       },
       "original": {
@@ -53,43 +65,27 @@
     },
     "nixpkgs": {
       "locked": {
-        "lastModified": 1637841632,
-        "narHash": "sha256-QYqiKHdda0EOnLGQCHE+GluD/Lq2EJj4hVTooPM55Ic=",
+        "lastModified": 1672580127,
+        "narHash": "sha256-3lW3xZslREhJogoOkjeZtlBtvFMyxHku7I/9IVehhT8=",
         "owner": "NixOS",
         "repo": "nixpkgs",
-        "rev": "73369f8d0864854d1acfa7f1e6217f7d6b6e3fa1",
+        "rev": "0874168639713f547c05947c76124f78441ea46c",
         "type": "github"
       },
       "original": {
         "owner": "NixOS",
-        "ref": "nixos-unstable",
+        "ref": "nixos-22.05",
         "repo": "nixpkgs",
         "type": "github"
       }
     },
     "nixpkgsUnstable": {
       "locked": {
-        "lastModified": 1638376152,
-        "narHash": "sha256-ucgLpVqhFnClH7YRUHBHnmiOd82RZdFR3XJt36ks5fE=",
-        "owner": "NixOS",
-        "repo": "nixpkgs",
-        "rev": "6daa4a5c045d40e6eae60a3b6e427e8700f1c07f",
-        "type": "github"
-      },
-      "original": {
-        "owner": "NixOS",
-        "ref": "nixos-unstable",
-        "repo": "nixpkgs",
-        "type": "github"
-      }
-    },
-    "nixpkgs_2": {
-      "locked": {
-        "lastModified": 1638371214,
-        "narHash": "sha256-0kE6KhgH7n0vyuX4aUoGsGIQOqjIx2fJavpCWtn73rc=",
+        "lastModified": 1659446231,
+        "narHash": "sha256-hekabNdTdgR/iLsgce5TGWmfIDZ86qjPhxDg/8TlzhE=",
         "owner": "NixOS",
         "repo": "nixpkgs",
-        "rev": "a640d8394f34714578f3e6335fc767d0755d78f9",
+        "rev": "eabc38219184cc3e04a974fe31857d8e0eac098d",
         "type": "github"
       },
       "original": {
@@ -102,7 +98,7 @@
     "root": {
       "inputs": {
         "androidPkgs": "androidPkgs",
-        "nixpkgs": "nixpkgs_2",
+        "nixpkgs": "nixpkgs",
         "nixpkgsUnstable": "nixpkgsUnstable"
       }
     }
diff --git a/flake.nix b/flake.nix
index 516f734..a2f95fd 100644
--- a/flake.nix
+++ b/flake.nix
@@ -2,9 +2,10 @@
   description = "Build Android (AOSP) using Nix";
 
   inputs = {
-    nixpkgs.url = "github:NixOS/nixpkgs/nixos-21.11";
-    nixpkgsUnstable.url = "github:NixOS/nixpkgs/nixos-unstable";
+    nixpkgs.url = "github:NixOS/nixpkgs/nixos-22.05";
+    nixpkgsUnstable.url = "github:NixOS/nixpkgs/nixos-21.11"; # (this should really be called nixpkgsLegacy, but changing the set of input names does not work with my flake patching)
     androidPkgs.url = "github:tadfisher/android-nixpkgs/stable";
+    androidPkgs.inputs.nixpkgs.follows = "nixpkgs";
   };
 
   outputs = { self, nixpkgs, androidPkgs, ... }@inputs: let
@@ -31,9 +32,10 @@
       name = "robotnix-scripts";
       nativeBuildInputs = with pkgs; [
         # For android updater scripts
-        (python3.withPackages (p: with p; [ mypy flake8 pytest ]))
-        gitRepo nix-prefetch-git
-        curl go-pup jq
+        (python39.withPackages (p: with p; [ mypy flake8 pytest ]))
+        (gitRepo.overrideAttrs (old: { buildInputs = [ python39 ]; })) # in python 3.10+, 'repo' can't find 'formatter'
+        nix-prefetch-git
+        curl pup jq
         shellcheck
         wget
 
diff --git a/flavors/lineageos/default.nix b/flavors/lineageos/default.nix
index 450f04b..708e40c 100644
--- a/flavors/lineageos/default.nix
+++ b/flavors/lineageos/default.nix
@@ -14,14 +14,14 @@ let
     "10" = "lineage-17.1";
     "11" = "lineage-18.1";
     "12" = "lineage-19.1";
+    "13" = "lineage-20.0";
   };
   lineageBranchToAndroidVersion = mapAttrs' (name: value: nameValuePair value name) androidVersionToLineageBranch;
 
-  deviceMetadata = lib.importJSON ./device-metadata.json;
-  LineageOSRelease = androidVersionToLineageBranch.${builtins.toString config.androidVersion};
-  repoDirs = lib.importJSON (./. + "/${LineageOSRelease}/repo.json");
-  _deviceDirs = importJSON (./. + "/${LineageOSRelease}/device-dirs.json");
-  vendorDirs = importJSON (./. + "/${LineageOSRelease}/vendor-dirs.json");
+  deviceMetadata = importJSON (config.source.lineage.repoDir + "/device-metadata.json");
+  repoDirs = importJSON (config.source.lineage.repoDir + "/${config.source.lineage.release}/repo.json");
+  _deviceDirs = importJSON (config.source.lineage.repoDir + "/${config.source.lineage.release}/device-dirs.json");
+  vendorDirs = importJSON (config.source.lineage.repoDir + "/${config.source.lineage.release}/vendor-dirs.json");
 
   # TODO: Condition on soc name?
   dtbReproducibilityFix = ''
@@ -66,8 +66,13 @@ let
   # TODO: Move this filtering into vanilla/graphene
   filterDirAttrs = dir: filterAttrs (n: v: elem n ["rev" "sha256" "url" "patches" "postPatch"]) dir;
   filterDirsAttrs = dirs: mapAttrs (n: v: filterDirAttrs v) dirs;
-in mkIf (config.flavor == "lineageos")
-{
+in { options = {
+
+  source.lineage.repoDir = lib.mkOption { description = ''(Optionally external) directory in which the LinageOS 'repo" files are saved. These can be created and updated by calling `TARGET_DIR=... ./update.sh ...`.''; default = ./.; type = lib.types.path; };
+  source.lineage.release = lib.mkOption { description = ''The LinageOS branch (version) to build for this device.''; defaultText = "as listed in `device-metadata.json` in `.repoDir`"; default = androidVersionToLineageBranch.${builtins.toString config.androidVersion}; type = lib.types.str; };
+
+}; config = mkIf (config.flavor == "lineageos") {
+
   androidVersion = let
       defaultBranch = deviceMetadata.${config.device}.branch;
     in mkIf (deviceMetadata ? ${config.device}) (mkDefault (lib.toInt lineageBranchToAndroidVersion.${defaultBranch}));
@@ -137,7 +142,7 @@ in mkIf (config.flavor == "lineageos")
   );
 
   source.manifest.url = mkDefault "https://github.com/LineageOS/android.git";
-  source.manifest.rev = mkDefault "refs/heads/${LineageOSRelease}";
+  source.manifest.rev = mkDefault "refs/heads/${config.source.lineage.release}";
 
   # Enable robotnix-built chromium / webview
   apps.chromium.enable = mkDefault true;
@@ -168,4 +173,4 @@ in mkIf (config.flavor == "lineageos")
   # LineageOS needs this additional command line argument to enable
   # backuptool.sh, which runs scripts under /system/addons.d
   otaArgs = [ "--backup=true" ];
-}
+}; }
diff --git a/flavors/lineageos/update.sh b/flavors/lineageos/update.sh
index a7c24f3..449bf23 100755
--- a/flavors/lineageos/update.sh
+++ b/flavors/lineageos/update.sh
@@ -2,11 +2,13 @@
 # SPDX-FileCopyrightText: 2020 Daniel Fullmer and robotnix contributors
 # SPDX-License-Identifier: MIT
 
+# Usage: [TARGET_DIR=...] ./update.sh lineage-1X.Y [vendor_device[ ...vendor_device]]
+
 set -euo pipefail
 
 cd "$(dirname "${BASH_SOURCE[0]}")"
 
-branch=$1
+branch=$1 ; shift 1
 
 args=(
     --cache-search-path ../../
@@ -18,7 +20,7 @@ args=(
 export TMPDIR=/tmp
 
 ./update_device_metadata.py
-../../scripts/mk_repo_file.py --out "${branch}/repo.json" "${args[@]}"
-./update_device_dirs.py --branch "$branch"
+../../scripts/mk_repo_file.py --out "${TARGET_DIR:-$PWD}/${branch}/repo.json" "${args[@]}"
+./update_device_dirs.py --branch "$branch" "$@"
 
 echo Updated branch "$branch". End epoch: "$(date +%s)"
diff --git a/flavors/lineageos/update_device_dirs.py b/flavors/lineageos/update_device_dirs.py
index 56bb411..b94f7eb 100755
--- a/flavors/lineageos/update_device_dirs.py
+++ b/flavors/lineageos/update_device_dirs.py
@@ -178,5 +178,5 @@ def main() -> None:
 
 
 if __name__ == '__main__':
-    os.chdir(pathlib.Path(__file__).parent.resolve())
+    os.chdir(os.environ.get('TARGET_DIR', pathlib.Path(__file__).parent.resolve()))
     main()
diff --git a/flavors/lineageos/update_device_metadata.py b/flavors/lineageos/update_device_metadata.py
index b026a5d..37b6211 100755
--- a/flavors/lineageos/update_device_metadata.py
+++ b/flavors/lineageos/update_device_metadata.py
@@ -62,5 +62,5 @@ def fetch_metadata(
 
 if __name__ == '__main__':
     metadata = fetch_metadata()
-    os.chdir(pathlib.Path(__file__).parent.resolve())
+    os.chdir(os.environ.get('TARGET_DIR', pathlib.Path(__file__).parent.resolve()))
     save('device-metadata.json', metadata)
diff --git a/modules/12/default.nix b/modules/12/default.nix
index 0c1927e..2640c5a 100644
--- a/modules/12/default.nix
+++ b/modules/12/default.nix
@@ -9,7 +9,7 @@ in
 mkIf (config.androidVersion == 12) {
   source.dirs."build/make".patches = [
     ./build_make/0001-Readonly-source-fix.patch
-    ./build_make/0002-Add-vendor-bootconfig.img-to-target-files-package.patch
+    #./build_make/0002-Add-vendor-bootconfig.img-to-target-files-package.patch # (upstreamed)
     #./build_make/0003-Add-option-to-include-prebuilt-images-when-signing-t.patch # Moved temporarily to modules/pixel/driver-binaries.nix
   ];
 
diff --git a/modules/apps/seedvault.nix b/modules/apps/seedvault.nix
index 7c80517..ecd2a9d 100644
--- a/modules/apps/seedvault.nix
+++ b/modules/apps/seedvault.nix
@@ -32,7 +32,7 @@ in
     resources."frameworks/base/packages/SettingsProvider".def_backup_transport = "com.stevesoltys.seedvault.transport.ConfigurableBackupTransport";
   }
   (mkIf (config.androidVersion == 12) {
-    # For android 11, just use the source tree from upstream, and have soong build it
+    # For android 12, just use the source tree from upstream, and have soong build it
     source.dirs."robotnix/seedvault".src = pkgs.fetchFromGitHub {
       owner = "seedvault-app";
       repo = "seedvault";
diff --git a/modules/release.nix b/modules/release.nix
index d729697..efa2937 100644
--- a/modules/release.nix
+++ b/modules/release.nix
@@ -77,7 +77,7 @@ let
 
       export PATH=${lib.getBin pkgs.zip}/bin:${lib.getBin pkgs.unzip}/bin:$PATH
       ${pkgs.runtimeShell} ${config.source.dirs."device/common".src}/generate-factory-images-common.sh
-      mv *-factory-*.zip ${out}
+      mv ${config.device}-${config.buildNumber}-factory-*.zip ${out}
   '';
 in
 {
diff --git a/modules/signing.nix b/modules/signing.nix
index 150a7bb..2f0bf0a 100644
--- a/modules/signing.nix
+++ b/modules/signing.nix
@@ -199,11 +199,11 @@ in
 
     build.generateKeysScript = let
       # Get a bunch of utilities to generate keys
-      keyTools = pkgs.runCommandCC "android-key-tools" { buildInputs = [ (if config.androidVersion >= 12 then pkgs.python3 else pkgs.python2) ]; } ''
+      keyTools = pkgs.runCommandCC "android-key-tools" { buildInputs = [ (if config.androidVersion >= 12 then pkgs.python3 else pkgs.python2) pkgs.boringssl.dev ]; } ''
         mkdir -p $out/bin
 
         cp ${config.source.dirs."development".src}/tools/make_key $out/bin/make_key
-        substituteInPlace $out/bin/make_key --replace openssl ${lib.getBin pkgs.openssl}/bin/openssl
+        substituteInPlace $out/bin/make_key --replace openssl ${lib.getBin pkgs.openssl_1_1}/bin/openssl
 
         cc -o $out/bin/generate_verity_key \
           ${config.source.dirs."system/extras".src}/verity/generate_verity_key.c \
diff --git a/nixos/attestation-server/gradle-env.nix b/nixos/attestation-server/gradle-env.nix
index 3469da2..eb4c9fe 100644
--- a/nixos/attestation-server/gradle-env.nix
+++ b/nixos/attestation-server/gradle-env.nix
@@ -27,8 +27,9 @@
 , gradleGen
 , writeText
 , writeTextDir
+, makeWrapper, unzip, ncurses5, ncurses6
 }:
-
+let gradleArgs = { inherit lib stdenv fetchurl makeWrapper unzip ncurses5 ncurses6; }; in
 {
 # Path to the environment spec generated by gradle2nix (e.g. gradle-env.json).
   envSpec
@@ -233,7 +234,7 @@ let
     paths = map mkDep deps ++ mkModuleMetadata deps ++ mkSnapshotMetadata deps;
   };
 
-  mkInitScript = projectSpec: gradle:
+  mkInitScript = projectSpec: gradle': let gradle = gradle' gradleArgs; in
     let
       repos = mapAttrs (mkRepo projectSpec.name) projectSpec.dependencies;
       hasDependencies = mapAttrs (type: deps: deps != []) projectSpec.dependencies;
@@ -325,7 +326,7 @@ let
       '';
 
   mkGradle = gradleSpec:
-    gradleGen.gradleGen {
+    gradleGen {
       inherit (gradleSpec) nativeVersion version sha256;
     };
 
@@ -367,7 +368,7 @@ in stdenv.mkDerivation ((builtins.removeAttrs args [ "fetchers" ]) // {
 
   inherit pname version;
 
-  nativeBuildInputs = (args.nativeBuildInputs or []) ++ [ projectEnv.gradle ];
+  nativeBuildInputs = (args.nativeBuildInputs or []) ++ [ (projectEnv.gradle gradleArgs) ];
 
   buildPhase = args.buildPhase or ''
     runHook preBuild
diff --git a/pkgs/default.nix b/pkgs/default.nix
index b1397c7..108dbb2 100644
--- a/pkgs/default.nix
+++ b/pkgs/default.nix
@@ -11,14 +11,25 @@
   ... }@args:
 
 let
-  inherit (inputs) nixpkgs nixpkgsUnstable androidPkgs;
+
+  patchInput = name: input: patches: if patches == [ ] then input else let
+    patched = inputs.nixpkgs.legacyPackages.x86_64-linux.applyPatches {
+      name = "${name}-patched"; src = "${input}"; inherit patches;
+    };
+    outputs = (import "${patched.outPath}/flake.nix").outputs ({ self = input.sourceInfo // patched // outputs; } // input.inputs);
+  in outputs // input.sourceInfo // { inherit (input) inputs; inherit outputs; inherit (input) sourceInfo; };
+
+  inherit (inputs) nixpkgsUnstable androidPkgs;
+  nixpkgs = patchInput "nixpkgs" inputs.nixpkgs [
+    ./nixpkgs-undisable-python-mox.patch # https://discourse.nixos.org/t/un-disabling-a-python-package-in-an-overlay/10593/6
+    # TODO: since we take python2 from an older nixpkgs anyway, this may not be needed anymore
+  ];
+
 in nixpkgs.legacyPackages.x86_64-linux.appendOverlays [
   (self: super: {
     androidPkgs.packages = androidPkgs.packages.x86_64-linux;
     androidPkgs.sdk = androidPkgs.sdk.x86_64-linux;
-
-    inherit (nixpkgsUnstable.legacyPackages.x86_64-linux)
-      diffoscope;
+    inherit (nixpkgsUnstable.legacyPackages.x86_64-linux) python2; # "python2.7-protobuf-3.17.3.drv failed with exit code 1" without printing an error -.-
   })
   (import ./overlay.nix)
 ]
diff --git a/pkgs/fetchgit/builder.sh b/pkgs/fetchgit/builder.sh
index 0047a33..acb9706 100644
--- a/pkgs/fetchgit/builder.sh
+++ b/pkgs/fetchgit/builder.sh
@@ -2,6 +2,8 @@
 # - no revision specified and remote has a HEAD which is used
 # - revision specified and remote has a HEAD
 # - revision specified and remote without HEAD
+#
+if [ -e .attrs.sh ]; then source .attrs.sh; fi
 source $stdenv/setup
 
 header "exporting $url (rev $rev) into $out"
@@ -11,6 +13,8 @@ $SHELL $fetcher --builder --url "$url" --out "$out" --rev "$rev" \
   ${fetchLFS:+--fetch-lfs} \
   ${deepClone:+--deepClone} \
   ${fetchSubmodules:+--fetch-submodules} \
+  ${sparseCheckout:+--sparse-checkout "$sparseCheckout"} \
+  ${nonConeMode:+--non-cone-mode} \
   ${branchName:+--branch-name "$branchName"}
 
 runHook postFetch
diff --git a/pkgs/fetchgit/default.nix b/pkgs/fetchgit/default.nix
index bccfbb2..1209638 100644
--- a/pkgs/fetchgit/default.nix
+++ b/pkgs/fetchgit/default.nix
@@ -15,6 +15,8 @@ in
 { url, rev ? "HEAD", md5 ? "", sha256 ? "", hash ? "", leaveDotGit ? deepClone
 , fetchSubmodules ? true, deepClone ? false
 , branchName ? null
+, sparseCheckout ? []
+, nonConeMode ? false
 , name ? urlToName url rev
 , # Shell code executed after the file has been fetched
   # successfully. This can do things like check or transform the file.
@@ -26,22 +28,21 @@ in
 , # Impure env vars (https://nixos.org/nix/manual/#sec-advanced-attributes)
   # needed for netrcPhase
   netrcImpureEnvVars ? []
+, meta ? {}
+, allowedRequisites ? null
 }:
 
 /* NOTE:
    fetchgit has one problem: git fetch only works for refs.
-   This is because fetching arbitrary (maybe dangling) commits may be a security risk
+   This is because fetching arbitrary (maybe dangling) commits creates garbage collection risks
    and checking whether a commit belongs to a ref is expensive. This may
    change in the future when some caching is added to git (?)
    Usually refs are either tags (refs/tags/*) or branches (refs/heads/*)
    Cloning branches will make the hash check fail when there is an update.
    But not all patches we want can be accessed by tags.
-
    The workaround is getting the last n commits so that it's likely that they
    still contain the hash we want.
-
    for now : increase depth iteratively (TODO)
-
    real fix: ask git folks to add a
    git fetch $HASH contained in $BRANCH
    facility because checking that $HASH is contained in $BRANCH is less
@@ -51,12 +52,16 @@ in
 */
 
 assert deepClone -> leaveDotGit;
+assert nonConeMode -> !(sparseCheckout == "" || sparseCheckout == []);
 
 if md5 != "" then
   throw "fetchgit does not support md5 anymore, please use sha256"
 else if hash != "" && sha256 != "" then
   throw "Only one of sha256 or hash can be set"
 else
+# Added 2022-11-12
+#lib.warnIf (builtins.isString sparseCheckout)
+#  "Please provide directories/patterns for sparse checkout as a list of strings. Support for passing a (multi-line) string is deprecated and will be removed in the next release."
 stdenvNoCC.mkDerivation {
   inherit name;
   builder = ./builder.sh;
@@ -74,7 +79,12 @@ stdenvNoCC.mkDerivation {
   else
     lib.fakeSha256;
 
-  inherit url rev leaveDotGit fetchLFS fetchSubmodules deepClone branchName postFetch;
+  # git-sparse-checkout(1) says:
+  # > When the --stdin option is provided, the directories or patterns are read
+  # > from standard in as a newline-delimited list instead of from the arguments.
+  sparseCheckout = if builtins.isString sparseCheckout then sparseCheckout else builtins.concatStringsSep "\n" sparseCheckout;
+
+  inherit url rev leaveDotGit fetchLFS fetchSubmodules deepClone branchName nonConeMode postFetch;
 
   postHook = if netrcPhase == null then null else ''
     ${netrcPhase}
@@ -90,5 +100,10 @@ stdenvNoCC.mkDerivation {
     "ROBOTNIX_GIT_MIRRORS"
   ];
 
-  inherit preferLocalBuild;
+
+  inherit preferLocalBuild meta allowedRequisites;
+
+  passthru = {
+    gitRepoUrl = url;
+  };
 }
diff --git a/pkgs/fetchgit/deterministic-git b/pkgs/fetchgit/deterministic-git
new file mode 100755
index 0000000..67f5855
--- /dev/null
+++ b/pkgs/fetchgit/deterministic-git
@@ -0,0 +1,45 @@
+#!/bin/sh
+
+# some git commands print to stdout, which would contaminate our JSON output
+clean_git(){
+    git "$@" >&2
+}
+
+# Remove all remote branches, remove tags not reachable from HEAD, do a full
+# repack and then garbage collect unreferenced objects.
+make_deterministic_repo(){
+    local repo="$1"
+
+    # run in sub-shell to not touch current working directory
+    (
+    cd "$repo"
+    # Remove files that contain timestamps or otherwise have non-deterministic
+    # properties.
+    rm -rf .git/logs/ .git/hooks/ .git/index .git/FETCH_HEAD .git/ORIG_HEAD \
+        .git/refs/remotes/origin/HEAD .git/config
+
+    # Remove all remote branches.
+    git branch -r | while read -r branch; do
+        clean_git branch -rD "$branch"
+    done
+
+    # Remove tags not reachable from HEAD. If we're exactly on a tag, don't
+    # delete it.
+    maybe_tag=$(git tag --points-at HEAD)
+    git tag --contains HEAD | while read -r tag; do
+        if [ "$tag" != "$maybe_tag" ]; then
+            clean_git tag -d "$tag"
+        fi
+    done
+
+    # Do a full repack. Must run single-threaded, or else we lose determinism.
+    clean_git config pack.threads 1
+    clean_git repack -A -d -f
+    rm -f .git/config
+
+    # Garbage collect unreferenced objects.
+    # Note: --keep-largest-pack prevents non-deterministic ordering of packs
+    #   listed in .git/objects/info/packs by only using a single pack
+    clean_git gc --prune=all --keep-largest-pack
+    )
+}
diff --git a/pkgs/fetchgit/nix-prefetch-git b/pkgs/fetchgit/nix-prefetch-git
index cb93aef..8d35ff6 100755
--- a/pkgs/fetchgit/nix-prefetch-git
+++ b/pkgs/fetchgit/nix-prefetch-git
@@ -41,13 +41,14 @@ fi
 
 usage(){
     echo  >&2 "syntax: nix-prefetch-git [options] [URL [REVISION [EXPECTED-HASH]]]
-
 Options:
       --out path      Path where the output would be stored.
       --url url       Any url understood by 'git clone'.
       --rev ref       Any sha1 or references (such as refs/heads/master)
       --hash h        Expected hash.
       --branch-name   Branch name to check out into
+      --sparse-checkout Only fetch and checkout part of the repository.
+      --non-cone-mode Use non-cone mode for sparse checkouts.
       --deepClone     Clone the entire repository.
       --no-deepClone  Make a shallow clone of just the required ref.
       --leave-dotGit  Keep the .git directories.
@@ -75,6 +76,8 @@ for arg; do
             --hash) argfun=set_hashType;;
             --branch-name) argfun=set_branchName;;
             --deepClone) deepClone=true;;
+            --sparse-checkout) argfun=set_sparseCheckout;;
+            --non-cone-mode) nonConeMode=true;;
             --quiet) QUIET=true;;
             --no-deepClone) deepClone=;;
             --leave-dotGit) leaveDotGit=true;;
@@ -96,7 +99,7 @@ for arg; do
         case $argfun in
             set_*)
                 var=${argfun#set_}
-                eval $var=$arg
+                eval "$var=$(printf %q "$arg")"
                 ;;
         esac
         argfun=""
@@ -112,6 +115,10 @@ init_remote(){
     local url=$1
     clean_git init --initial-branch=master
     clean_git remote add origin "$url"
+    if [ -n "$sparseCheckout" ]; then
+        git config remote.origin.partialclonefilter "blob:none"
+        echo "$sparseCheckout" | git sparse-checkout set --stdin ${nonConeMode:+--no-cone}
+    fi
     ( [ -n "$http_proxy" ] && clean_git config http.proxy "$http_proxy" ) || true
 
     # Set up git mirrors
@@ -310,7 +317,7 @@ clone_user_rev() {
     local rev="${3:-HEAD}"
 
     if [ -n "$fetchLFS" ]; then
-        tmpHomePath="$(mktemp -d -p nix-prefetch-git-tmp-home-XXXXXXXXXX)"
+        tmpHomePath="$(mktemp -d "${TMPDIR:-/tmp}/nix-prefetch-git-tmp-home-XXXXXXXXXX")"
         exit_handlers+=(remove_tmpHomePath)
         HOME="$tmpHomePath"
         git lfs install
diff --git a/pkgs/nixpkgs-undisable-python-mox.patch b/pkgs/nixpkgs-undisable-python-mox.patch
new file mode 100644
index 0000000..f5785c2
--- /dev/null
+++ b/pkgs/nixpkgs-undisable-python-mox.patch
@@ -0,0 +1,13 @@
+diff --git a/pkgs/development/python-modules/mox/default.nix b/pkgs/development/python-modules/mox/default.nix
+index bd7fc589a7a..9c8be936ac7 100644
+--- a/pkgs/development/python-modules/mox/default.nix
++++ b/pkgs/development/python-modules/mox/default.nix
+@@ -11,8 +11,6 @@ buildPythonPackage rec {
+   version = "0.7.8";
+   format = "setuptools";
+ 
+-  disabled = pythonOlder "3.7";
+-
+   src = fetchFromGitHub {
+     owner = "ivancrneto";
+     repo = "pymox";
